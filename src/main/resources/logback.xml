<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true">

<include resource="org/springframework/boot/logging/logback/base.xml"/>

<appender name="STASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
    <destination>${LOGSTASH_SOCKET}</destination>

    <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">

        <providers>
            <timestamp>
                <timeZone>UTC</timeZone>
            </timestamp>
            <mdc/> <!-- MDC variables on the Thread will be written as JSON fields -->
            <context/> <!--Outputs entries from logback's context -->
            <version/> <!-- Logstash json format version, the @version field in the output -->
            <logLevel/>
            <loggerName/>
            <pattern>
                <!-- we can add some custom fields to be sent with all the log entries. -->
                <!--make filtering easier in Logstash -->
                <!--or searching with Kibana -->
                <pattern>
                    {
                    "service-name": "configuration",
                    "service-version": "1.0.0-SNAPSHOT",
                    "trace.id": "%X{trace.id:-}",
                    "span.id": "%X{span.id:-}",
                    "parent": "%X{transaction.id:-}",
                    "pid": "${PID:-}",
                    "class": "%logger{40}"
                    }
                </pattern>
            </pattern>
            <tags/>
            <threadName/>
            <message/>
            <logstashMarkers/> <!-- Useful so we can add extra information for specific log lines as Markers -->
            <arguments/> <!--or through StructuredArguments -->
            <stackTrace>
                <throwableConverter class="net.logstash.logback.stacktrace.ShortenedThrowableConverter">
                    <maxDepthPerThrowable>30</maxDepthPerThrowable>
                    <maxLength>2048</maxLength>
                    <shortenedClassNameLength>20</shortenedClassNameLength>
                    <exclude>^sun\.reflect\..*\.invoke</exclude>
                    <exclude>^net\.sf\.cglib\.proxy\.MethodProxy\.invoke</exclude>
                    <rootCauseFirst>true</rootCauseFirst>
                </throwableConverter>
            </stackTrace>
        </providers>
    </encoder>
</appender>

<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <withJansi>true</withJansi>
    <!-- encoders are assigned the type
         ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
    <encoder>
        <pattern>%cyan(%d{HH:mm:ss.SSS}) %yellow([%thread]) %highlight(%-5level) %magenta(%logger{36}) - %msg%n</pattern>
    </encoder>
</appender>

<appender name="ASYNC" class="reactor.logback.AsyncAppender">
    <appender-ref ref="STASH"/>
</appender>

<root level="#logback.loglevel#">
    <appender-ref ref="ASYNC"/>
    <!--     <appender-ref ref="STDOUT" />-->
</root>

<logger name="io.micronaut.http.client" level="DEBUG"/>

<contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
    <resetJUL>true</resetJUL>
</contextListener>

</configuration>
